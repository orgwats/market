// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const getCandles = `-- name: GetCandles :many
SELECT symbol, open_time, open, high, low, close, volume, close_time, quote_volume, count, taker_buy_volume, taker_buy_quote_volume FROM (
  SELECT symbol, open_time, open, high, low, close, volume, close_time, quote_volume, count, taker_buy_volume, taker_buy_quote_volume 
  FROM candles
  WHERE symbol = ?
  ORDER BY open_time DESC
  LIMIT ?
) AS c
ORDER BY open_time ASC
`

type GetCandlesParams struct {
	Symbol string
	Limit  int32
}

func (q *Queries) GetCandles(ctx context.Context, arg GetCandlesParams) ([]Candle, error) {
	rows, err := q.db.QueryContext(ctx, getCandles, arg.Symbol, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Candle{}
	for rows.Next() {
		var i Candle
		if err := rows.Scan(
			&i.Symbol,
			&i.OpenTime,
			&i.Open,
			&i.High,
			&i.Low,
			&i.Close,
			&i.Volume,
			&i.CloseTime,
			&i.QuoteVolume,
			&i.Count,
			&i.TakerBuyVolume,
			&i.TakerBuyQuoteVolume,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestCandle = `-- name: GetLatestCandle :one
SELECT symbol, open_time, open, high, low, close, volume, close_time, quote_volume, count, taker_buy_volume, taker_buy_quote_volume
FROM candles
WHERE symbol = ?
ORDER BY open_time DESC
LIMIT 1
`

func (q *Queries) GetLatestCandle(ctx context.Context, symbol string) (Candle, error) {
	row := q.db.QueryRowContext(ctx, getLatestCandle, symbol)
	var i Candle
	err := row.Scan(
		&i.Symbol,
		&i.OpenTime,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Volume,
		&i.CloseTime,
		&i.QuoteVolume,
		&i.Count,
		&i.TakerBuyVolume,
		&i.TakerBuyQuoteVolume,
	)
	return i, err
}

const saveCandle = `-- name: SaveCandle :exec
INSERT INTO candles (
  symbol,
  open_time,
  open,
  high,
  low,
  close,
  volume,
  close_time,
  quote_volume,
  count,
  taker_buy_volume,
  taker_buy_quote_volume
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type SaveCandleParams struct {
	Symbol              string
	OpenTime            int64
	Open                string
	High                string
	Low                 string
	Close               string
	Volume              string
	CloseTime           int64
	QuoteVolume         string
	Count               int64
	TakerBuyVolume      string
	TakerBuyQuoteVolume string
}

func (q *Queries) SaveCandle(ctx context.Context, arg SaveCandleParams) error {
	_, err := q.db.ExecContext(ctx, saveCandle,
		arg.Symbol,
		arg.OpenTime,
		arg.Open,
		arg.High,
		arg.Low,
		arg.Close,
		arg.Volume,
		arg.CloseTime,
		arg.QuoteVolume,
		arg.Count,
		arg.TakerBuyVolume,
		arg.TakerBuyQuoteVolume,
	)
	return err
}
